runApp()
setwd("~/Documents/Coding/a7--jordanjones243")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
setwd("~/Documents/Coding/INFO-201-Group-1")
setwd("~/Documents/Coding/a7--jordanjones243")
runApp()
runApp()
test <- detailed_info("D000167")
detailed_info <- function(member_id) {
add_info <- tab_output(member_id)
select_add <-  select(add_info, url)
extra_info <- nested_frame(member_id)
select_extra <- extra_info %>%
select(phone, office, bills_sponsored)
new_df <- merge(select_add, select_extra)
details <- new_df %>%
select(url, phone, office, bills_sponsored)
return(details)
}
test <- detailed_info("D000167")
test1 <- tab_output("D000167")
source("api-key.R")
# Gets all of the representatives for the passed in state
rep_by_state <- function(state = "WA", chamber = "house") {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, chamber, "/", state, "/current.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test3 <- rep_by_state("WA", "house")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
# Gets additional information about a state rep with the passed in member ID
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
View(test1)
library("httr")
library("eeptools")
library("jsonlite")
library("dplyr")
source("api-key.R")
rep_by_state <- function(state = "WA", chamber = "house") {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, chamber, "/", state, "/current.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test3 <- rep_by_state("WA", "house")
View(test3)
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
View(test1)
install.packages("httr")
install.packages("httr")
install.packages("jsonlite")
install.packages("jsonlite")
library("httr")
library("eeptools")
library("jsonlite")
library("dplyr")
source("api-key.R")
setwd("~/Documents/Coding/a7--jordanjones243")
library("httr")
library("eeptools")
library("jsonlite")
library("dplyr")
# Gets additional information about a state rep with the passed in member ID
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
# Gets additional information about a state rep with the passed in member ID
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
View(test1)
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
get_rep_info <- function(rep_id) {
base_url <-  'https://api.propublica.org/congress/v1/members/'
endpoint <- paste0(base_url, rep_id, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = propublicakey))
# extract content from response
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
get_rep_info <- function(rep_id) {
base_url <-  'https://api.propublica.org/congress/v1/members/'
endpoint <- paste0(base_url, rep_id, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = propublicakey))
# extract content from response
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
test_new <- get_rep_info("D000167")
get_rep_info <- function(rep_id) {
base_url <-  'https://api.propublica.org/congress/v1/members/'
endpoint <- paste0(base_url, rep_id, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
# extract content from response
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
test_new <- get_rep_info("D000167")
api_key <- "jIlTMMQ6MSNnP2GnAkCzR9PTnFhwkWWQclX6dPCB"
rep_by_state <- function(state = "WA", chamber = "house") {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, chamber, "/", state, "/current.json")
response <- GET(endpoint, add_headers("X-API-Key" = api_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test3 <- rep_by_state("WA", "house")
View(test3)
View(test3)
get_rep_info <- function(rep_id) {
base_url <-  'https://api.propublica.org/congress/v1/members/'
endpoint <- paste0(base_url, rep_id, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = api_key))
# extract content from response
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
test_new <- get_rep_info("D000167")
test_som <- get_rep_info("D000167")
# Gets all of the representatives for the passed in state
rep_by_state <- function(state = "WA", chamber = "house") {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, chamber, "/", state, "/current.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test3 <- rep_by_state("WA", "house")
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
test_som <- get_rep_info("D000167")
get_rep_info <- function(rep_id) {
base_url <-  'https://api.propublica.org/congress/v1/members/'
endpoint <- paste0(base_url, rep_id, '.json')
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
# extract content from response
body <- content(response, "text")
parsed_data <- fromJSON(body)
return(parsed_data$results)
}
test_som <- get_rep_info("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
View(test1)
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
test1 <- tab_output("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data)
}
View(test1)
runApp()
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
runApp()
nested_frame <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results$roles[[1]])
}
test_nest <- nested_frame("D000167")
nested_frame <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results$roles[[1]])
}
test_nest <- nested_frame("D000167")
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
View(test1)
library("httr")
library("eeptools")
library("jsonlite")
library("dplyr")
source("api-key.R")
# Gets all of the representatives for the passed in state
rep_by_state <- function(state = "WA", chamber = "house") {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, chamber, "/", state, "/current.json")
response <- GET(endpoint, add_headers("X-API-Key" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test3 <- rep_by_state("WA", "house")
# Gets additional information about a state rep with the passed in member ID
tab_output <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results)
}
test1 <- tab_output("D000167")
View(test1)
# Creates table with name, party, age, twitter handle and facebook account
key_info <- function(state) {
state_rep <- rep_by_state(state)
ages <- state_rep$id
ages_list <- lapply(ages, get_age)
table <- state_rep %>%
mutate(age = unlist(ages_list)) %>%
select(name, party, age, twitter_id, facebook_account)
}
# Gets the age of the state representative with their member ID as a parameter
get_age <- function(member_id) {
nested <- nested_frame(member_id)
tabular <- tab_output(member_id)
tab_age <- tabular %>%
mutate(age = floor(age_calc(as.Date(tabular$date_of_birth), units = "years"))) %>%
select(age)
return(tab_age)
}
# Gets detailed info about a state rep
detailed_info <- function(member_id) {
add_info <- tab_output(member_id)
select_add <-  select(add_info, url)
extra_info <- nested_frame(member_id)
select_extra <- extra_info %>%
select(phone, office, bills_sponsored)
new_df <- merge(select_add, select_extra)
details <- new_df %>%
select(url, phone, office, bills_sponsored)
return(details)
}
test <- detailed_info("D000167")
# Gets nested frame from detailed info
nested_frame <- function(member_id) {
start_url <- "https://api.propublica.org/congress/v1/members/"
endpoint <- paste0(start_url, member_id, ".json")
response <- GET(endpoint, add_headers("X-API-KEY" = propublica_key))
content <- content(response, "text")
data <- fromJSON(content)
return(data$results$roles[[1]])
}
test_nest <- nested_frame("D000167")
# ---------- Calculations for Summary Page ----------
# Gets number of males and females representatives per state
gender_per_state <- function(state) {
reps <- rep_by_state(state)
headcount <- reps %>%
group_by(gender) %>%
summarize(
sum = n()
) %>%
pull(sum)
return(headcount)
}
# Gets number of democrats and republicans per state
party_per_state <- function(state) {
reps <- rep_by_state(state)
headcount <- reps %>%
group_by(party) %>%
summarize(
sum = n()
) %>%
pull(sum)
return(headcount)
}
# Creates the plot comparing number of democrats vs republicans per state
plot_p <- function(input) {
plot <- ggplot(data = party_per_state(input)) +
geom_bar(mapping = aes(x = party, y = total, colour = party)) +
coord_flip() +
labs(title = "Democrat vs. Republican Representatives per State", x = "Party", y = "Total per State")
return(plot)
}
# Creates the plot comparing number and male and female reps per state
plot_g <- function(input) {
plot <- ggplot(data = gender_per_state(input)) +
geom_bar(mapping = aes(x = gender, y = total, colour = gender)) +
coord_flip() +
labs(title = "Male vs. Female Representatives per State", x = "Gender", y = "Total per State")
return(plot)
}
test <- detailed_info("D000617")
View(test)
shiny::runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
observe({
state <- input$first
member_id <- key_info(state)$id
member_name <- key_info(state)$name
updateSelectInput(session, "rep", choices = setNames(member_id, member_name))
})
runApp('~/Documents/Coding/a7--jordanjones243')
library("shiny")
library("ggplot2")
source("propublica.R")
shinyServer(function(input, output, session) {
# Renders table that displays info about state reps
output$state <- renderTable({
table_df <- key_info(input$first)
return(as.data.frame(table_df))
})
# Allows for a state rep to be selected and then displays the info about the selected rep
observe({
state <- input$first
member_id <- key_info(state)$id
member_name <- key_info(state)$name
updateSelectInput(session, "rep", choices = setNames(member_id, member_name))
})
# Renders table that displays in depth info of a specific selected rep
output$spec <- renderTable({
return(detailed_info(input$rep))
})
# Displays the plot comparing number of reps of each gender for the selected state
output$gender <- renderPlotly({
return(ggplot(data = as.data.frame(gender_per_state(input$second))) +
geom_bar(mapping = aes(x = gender, y = total, colour = gender)) +
coord_flip() +
labs(title = "Male vs. Female Representatives per State", x = "Gender", y = "Total per State"))
})
# Displays the plot comparing number of reps of each party for the selected state
output$party <- renderPlotly({
return(ggplot(data = as.data.frame(party_per_state(input$second))) +
geom_bar(mapping = aes(x = party, y = total, colour = party)) +
coord_flip() +
labs(title = "Democrat vs. Republican Representatives per State", x = "Party", y = "Total per State"))
})
})
library("shiny")
library("ggplot2")
source("propublica.R")
shinyServer(function(input, output, session) {
# Renders table that displays info about state reps
output$state <- renderTable({
table_df <- key_info(input$first)
return(as.data.frame(table_df))
})
# Allows for a state rep to be selected and then displays the info about the selected rep
observe({
state <- input$first
member_id <- key_info(state)$id
member_name <- key_info(state)$name
updateSelectInput(session, "rep", choices = setNames(member_id, member_name))
})
# Renders table that displays in depth info of a specific selected rep
output$spec <- renderTable({
return(detailed_info(input$rep))
})
# Displays the plot comparing number of reps of each gender for the selected state
output$gender <- renderPlotly({
return(ggplot(data = as.data.frame(gender_per_state(input$second))) +
geom_bar(mapping = aes(x = gender, y = total, colour = gender)) +
coord_flip() +
labs(title = "Male vs. Female Representatives per State", x = "Gender", y = "Total per State"))
})
# Displays the plot comparing number of reps of each party for the selected state
output$party <- renderPlotly({
return(ggplot(data = as.data.frame(party_per_state(input$second))) +
geom_bar(mapping = aes(x = party, y = total, colour = party)) +
coord_flip() +
labs(title = "Democrat vs. Republican Representatives per State", x = "Party", y = "Total per State"))
})
})
runApp('~/Documents/Coding/a7--jordanjones243')
shinyServer(function(input, output, session) {
# Renders table that displays info about state reps
output$state <- renderTable({
table_df <- key_info(input$first)
return(as.data.frame(table_df))
})
# Allows for a state rep to be selected and then displays the info about the selected rep
observe({
state <- input$first
member_id <- key_info(state)$id
member_name <- key_info(state)$name
updateSelectInput(session, "rep", choices = setNames(member_id, member_name))
})
# Renders table that displays in depth info of a specific selected rep
output$spec <- renderTable({
table_df <- detailed_info(input$rep)
return(as.data.frame(table_df))
})
setwd("~/Documents/Coding/a7--jordanjones243")
runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
runApp('~/Documents/Coding/a7--jordanjones243')
