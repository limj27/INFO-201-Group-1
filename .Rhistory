more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
print(more_minutes_than_hours)
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction() <- function(name, age) {
result <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(result)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- paste("Hey I'm ", str_sub(my_intro, 19,  str_length(my_intro)))
print(casual_intro)
library("stringr")
# Create a numeric variable `my_age` that is equal to your age
my_age <- 19
# Create a variable `my_name` that is equal to your first name
my_name <- "Jordan"
print(my_name)
# Using multiplication, create a variable `minutes_in_a_day` that is
# equal to the number of minutes in a day
minutes_in_a_day <- 24 * 60
# Using multiplication, create a variable `hours_in_a_year` that is
# equal to the number of hours in a year
hours_in_a_year <- 24 * 7 * 52
# Create a variable `more_minutes_than_hours` that is boolean (TRUE/FALSE)
# It should be TRUE if there are more minutes/day than hours/year
# Otherwise it should be FALSE
more_minutes_than_hours <- minutes_in_a_day > hours_in_a_year
print(more_minutes_than_hours)
# Working with functions -------------------------------------------------------
# Write a function `make_introduction()` that takes in two args (`name`, `age`)
# This function should return a string value that says:
# Hello, my name is {name}, and I'm {age} years old.
# The values {name} and {age} should take on the values passed into the function
# Make sure that proper spacing is used (e.g., you shouldn't have multiple
# spaces between words, and you should a space after a comma)
make_introduction <- function(name, age) {
result <- paste0("Hello, my name is ", name, ", and I'm ", age, " years old.")
return(result)
}
# Create a variable `my_intro` by passing your variables `my_name` and `my_age`
# into your `make_introduction()` function
my_intro <- make_introduction(my_name, my_age)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- paste("Hey I'm ", str_sub(my_intro, 19,  str_length(my_intro)))
print(casual_intro)
# Create a variable `loud_intro`, which is `my_intro` in all upper-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all capital letters.
# Create a variable `quiet_intro`, which is `my_intro` in all lower-case letters
# You should do this by using a function to convert your `my_intro` variable
# into all lower-case letters.
# Create a new variable `capitalized_intro`, which is your `my_intro` variable,
# but with each word capitalized. hint: use the stringr function `str_to_title`
# Using the `str_count` function, create a variable `occurrences` that stores
# the # of times the letter "e" appears in `my_intro`
# Write a function `double()` that takes in a value and
# returns that value times two
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
# Write a function `cube()` that takes in a value and returns that value cubed
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
# Create a function `inches_to_cm` that converts from inches to centimeters
# Create a variable `inches_tall` that is your (numeric) height in inches
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It
my_intro <- make_introduction(my_name, my_age)
print (my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- paste("Hey I'm ", str_sub(my_intro, 19,  str_length(my_intro)))
print(casual_intro)
my_intro <- make_introduction(my_name, my_age)
print (my_intro)
# Create a variable `casual_intro` by substituting "Hello, my name is",
# with "Hey, I'm" in your `my_intro` variable
casual_intro <- paste("Hey I'm", str_sub(my_intro, 19,  str_length(my_intro)))
print(casual_intro)
loud_intro <- str_to_upper(my_intro)
print(loud_intro)
capitalized_intro <- str_to_title(my_intro)
print(capitalized_intro)
occurrences <- str_count(my_intro)
print(occurrences)
occurrences <- str_count(my_intro, "e")
print(occurrences)
double <- function(value) {
value * value
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
print(minutes_in_two_days)
double <- function(value) {
value * 2
}
# Using your `double()` function, create a variable `minutes_in_two_days`,
# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
print(minutes_in_two_days)
cube <- function(value) {
value * value * value
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
print(twenty_seven)
has_more_zs <- function(str1, str2) {
str1z <- str1_count(str1, "z") + str1_count(str2, "Z")
str2z <- str2_count(str2, "z") + str2_count(str2, "Z")
if (str1z > str2z) {
return(str1)
} else if (str1z < str2z) {
return(str2)
} else if (str1z == 0 & str2z == 0) {
print("Neither string contains the letter z.")
} else {
print("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs(razor, BLAZING)
has_more_zs <- function(str1, str2) {
str1z <- str_count(str1, "z") + str_count(str2, "Z")
str2z <- str_count(str2, "z") + str_count(str2, "Z")
if (str1z > str2z) {
return(str1)
} else if (str1z < str2z) {
return(str2)
} else if (str1z == 0 & str2z == 0) {
print("Neither string contains the letter z.")
} else {
print("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs(razor, BLAZING)
has_more_zs <- function(str1, str2) {
str1z <- str_count(str1, "z") + str_count(str2, "Z")
str2z <- str_count(str2, "z") + str_count(str2, "Z")
if (str1z > str2z) {
return(str1)
} else if (str1z < str2z) {
return(str2)
} else if (str1z == 0 & str2z == 0) {
print("Neither string contains the letter z.")
} else {
print("The strings have the same number of Zs.")
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("razor", "BLAZING")
remove_digits <- function(remove) {
str_extract_all(remove, [0:9])
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_nums <- remove_digits(c("INFO 201", "INFO 360", "CSE 373"))
print(remove_nums)
remove_digits <- function(remove) {
str_extract_all(remove, [0:9])
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
print(remove_digits(c("INFO 201", "INFO 360", "CSE 373")))
remove_digits <- function(remove) {
str_extract_all(remove, [0:9])
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
nums <- c("INFO 201", "INFO 360", "CSE 373")
print(remove_digits(nums))
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
View(grades)
# a3-using-data
# Before you get started, set your working directory using the Session menu
###################### Data Frame Manipulation (24 POINTS) #####################
# Create a vector `students` holding 1,000 values representing students
# They should have the values "Student 1", "Student 2",..., "Student 1000"
students <- paste0("Student ", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- rnorm(1000, mean <- 88, sd <- 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(1000, mean <- 85, sd <- 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades[spanish_grades > 100] <- 100
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
View(grades)
num_students <- nrow(grades)
print(num_students)
num_courses <- ncol(grades) - 1
print(num_courses)
grade$grade_diff <- students$math_grades - students$spanish_grades
grade$grade_diff <- students$math_grades - students$spanish_grades
students <- paste0("Student ", 1:1000)
# Create a vector `math_grades` that holds 1000 random values in it
# (these represent grades in a math course)
# These values should be normally distributed with a mean of 88 and a
# standard deviation of 10
math_grades <- rnorm(1000, mean <- 88, sd <- 10)
# Replace any values in the `math_grades vector` that are above 100 with
# the number 100
math_grades[math_grades > 100] <- 100
# Create a vector `spanish_grades` that holds 1000 random values in it
# (these represent grades in a spanish course)
# These values should be normally distributed with a mean of 85 and a
# standard deviation of 12
spanish_grades <- rnorm(1000, mean <- 85, sd <- 12)
# Replace any values in the `spanish_grades` that are above 100 with
# the number 100
spanish_grades[spanish_grades > 100] <- 100
# Create a data.frame variable `grades` by combining
# the vectors `students`, `math_grades`, and `spanish_grades`
# Make sure to properly handle strings
grades <- data.frame(students, math_grades, spanish_grades, stringsAsFactors = FALSE)
# Create a variable `num_students` that contains the
# number of rows in your dataframe `grades`
num_students <- nrow(grades)
# Create a variable `num_courses` that contains the number of columns
# in your dataframe `grades` minus one (b/c of their names)
num_courses <- ncol(grades) - 1
# Add a new column `grade_diff` to your dataframe, which is equal to
# `students$math_grades` minus `students$spanish_grades`
grade$grade_diff <- students$math_grades - students$spanish_grades
is.atomic(math_grades)
is.atomic(spanish_grades)
grade$grade_diff <- students[math_grades] - students[spanish_grades]
grade$grade_diff <- students$math_grades - students$spanish_grades
stats_df <- read.csv("2012-18_teamBoxScore.csv", stringsAsFactors = FALSE)
setwd("~/Documents/Coding/INFO-201-Group-1/data")
stats_df <- read.csv("2012-18_teamBoxScore.csv", stringsAsFactors = FALSE)
attendance_df <- read.xlsx2("NBA Team Annual Attendance.xlsx")
# example01.R
#-----------------------------------------------------------------------------
# Demonstrates using dylpr to join data frames
#-----------------------------------------------------------------------------
library("dplyr")
lint("tasks.R")
#-----------------------------------------------------------------------------
# Data Wrangle: Read data file and select two columns and rename them to
#   state_code
#   state_division_id
# And revmove all duplicates
# This function reduces about 3,500 rows to 50 rows (one for each state)
#-----------------------------------------------------------------------------
create_state_census_division_df <- function() {
# Read the file
df_t <- read.csv("./data/natural-amenity-simplified.csv",
header = TRUE,
stringsAsFactors = FALSE
)
# Data wrangling
df <- df_t %>%
select(    state_code = "STATE",
census_division_id = "Census.Division") %>%
distinct()
# Check if things seem to be correct
if (nrow(df) != 50 ) {
stop("Should be 50 rows - one for each state")
}
# View(df_t)
# View(df)
# Write the file
write.csv(df,"./data/state_census_division.csv", row.names=FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Creates a data frame that maps census_division_id a human readable name
# data frame
#    census_division_id  integer  [1 .. 9]
#    division_name       character
#
# Question: Are there 50 rows in this data frame? Why or why not?
#-----------------------------------------------------------------------------
create_state_census_division_name_df <- function() {
df <- read.csv(textConnection("
census_division_id,division_name
1,New England
2,Middle Atlantic
3,East  North Central
4,West North Central
5,South Atlantic
6,East South Central
7,West South Central
8,Mountain
9,Pacific
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_name     character
#    state_abbrev   character
#    state_code     character   [Length: 2]
#-----------------------------------------------------------------------------
create_state_name_info_df <- function() {
df <- read.csv(textConnection("
state_name,state_abbrev,state_code
Alabama,Ala.,AL
Alaska,Alaska,AK
Arizona,Ariz.,AZ
Arkansas,Ark.,AR
California,Calif.,CA
Colorado,Colo.,CO
Connecticut,Conn.,CT
Delaware,Del.,DE
District of Columbia,D.C.,DC
Florida,Fla.,FL
Georgia,Ga.,GA
Hawaii,Hawaii,HI
Idaho,Idaho,ID
Illinois,Ill.,IL
Indiana,Ind.,IN
Iowa,Iowa,IA
Kansas,Kans.,KS
Kentucky,Ky.,KY
Louisiana,La.,LA
Maine,Maine,ME
Maryland,Md.,MD
Massachusetts,Mass.,MA
Michigan,Mich.,MI
Minnesota,Minn.,MN
Mississippi,Miss.,MS
Missouri,Mo.,MO
Montana,Mont.,MT
Nebraska,Nebr.,NE
Nevada,Nev.,NV
New Hampshire,N.H.,NH
New ersey,N.J.,NJ
New Mexico,N.M.,NM
New York,N.Y.,NY
North Carolina,N.C.,NC
North Dakota,N.D.,ND
Ohio,Ohio,OH
Oklahoma,Okla.,OK
Oregon,Ore.,OR
Pennsylvania,Pa.,PA
Rhode Island,R.I.,RI
South Carolina,S.C.,SC
South Dakota,S.D.,SD
Tennessee,Tenn.,TN
Texas,Tex.,TX
Utah,Utah,UT
Vermont,Vt.,VT
Virginia,Va.,VA
Washington,Wash.,WA
West Virginia,W.Va.,WV
Wisconsin,Wis.,WI
Wyoming,Wyo.,WY
"),
stringsAsFactors = FALSE)
return (df)
}
#-----------------------------------------------------------------------------
# Creates a data frame of state name, abbriviation, and code
# data frame
#    state_code            character   [Length: 2]
#    census_division_id    integer     [1 .. 8]
#
# Note: This data comes from: create_state_census_division_df()
#-----------------------------------------------------------------------------
create_state_code_census_division_df <- function() {
df <- read.csv(textConnection(
"state_code,census_division_id
AL,6
AZ,8
AR,7
CA,9
CO,8
CT,1
DE,5
DC,5
FL,5
GA,5
ID,8
IL,3
IN,3
IA,4
KS,4
KY,6
LA,7
ME,1
MD,5
MA,1
MI,3
MN,4
MS,6
MO,4
MT,8
NE,4
NV,8
NH,1
NJ,2
NM,8
NY,2
NC,5
ND,4
OH,3
OK,7
OR,9
PA,2
RI,1
SC,5
SD,4
TN,6
TX,7
UT,8
VT,1
VA,5
WA,9
WV,5
WI,3
WI,4
WY,8
"),
stringsAsFactors = FALSE)
return(df)
}
#-----------------------------------------------------------------------------
# Task #1: Write a function that returns the following data frame:
#    state_code
#    state_abbrev
#    state_name
#    state_census_id
#    state_census_name
#
# This will require that you combine data from two data frames. Use the dplyr
# join functions.
#
# See: ?join()
#-----------------------------------------------------------------------------
create_state_info_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #2: How many states are in each of the census divisions? Show the IDs and
# the names.
#-----------------------------------------------------------------------------
num_states_by_cenusus_division_df <- function () {
df <- NULL
# your code goes here
return(df)
}
#-----------------------------------------------------------------------------
# Task #3: What is the following expression TRUE?  This this a problem? If so, what
# should be done?
#-----------------------------------------------------------------------------
if (nrow(create_state_census_division_df()) != nrow(create_state_name_info_df())) {
print ("Number of records in state_census_division and state_name_info data frames are different!")
}
#-----------------------------------------------------------------------------
# Main: Test the functions
#-----------------------------------------------------------------------------
df1 <- create_state_info_df()
View(df1)
df2 <- num_states_by_cenusus_division_df()
View(df2)
install.packages("readxl")
attendance_df <- read_xlsx("NBA Team Annual Attendance.xlsx")
attendance_df <- read_excel("NBA Team Annual Attendance.xlsx")
setwd("~/Documents/Coding")
setwd("~/Documents/Coding/INFO-201-Group-1")
library("readxl")
library("ggplot2")
stats_df <- read.csv("2012-18_teamBoxScore.csv", stringsAsFactors = FALSE)
attendance_df <- read_excel("NBA Team Annual Attendance.xlsx")
library("readxl")
library("ggplot2")
stats_df <- read.csv("2012-18_teamBoxScore.csv", stringsAsFactors = FALSE)
attendance_df <- read_excel("data/NBA Team Annual Attendance.xlsx")
stats_df <- read.csv("data/2012-18_teamBoxScore.csv", stringsAsFactors = FALSE)
View(stats_df)
View(attendance_df)
attendance <- attendance_df %>%
group_by(`Starting Year`, Team, `Home: Avg Attendance`)
View(attendance)
attendance <- attendance_df %>%
select(`Starting Year`, Team, `Home: Avg Attendance`)
View(attendance)
stats <- stats_df %>%
select(gmDate, teamAbbr, teamRslt)
View(stats)
